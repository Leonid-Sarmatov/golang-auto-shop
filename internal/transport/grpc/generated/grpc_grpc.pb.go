// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: grpc.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CarShop_AddUser_FullMethodName           = "/generated.CarShop/AddUser"
	CarShop_DeleteUser_FullMethodName        = "/generated.CarShop/DeleteUser"
	CarShop_UpdateUser_FullMethodName        = "/generated.CarShop/UpdateUser"
	CarShop_GetUser_FullMethodName           = "/generated.CarShop/GetUser"
	CarShop_AddEngine_FullMethodName         = "/generated.CarShop/AddEngine"
	CarShop_DeleteEngine_FullMethodName      = "/generated.CarShop/DeleteEngine"
	CarShop_UpdateEngine_FullMethodName      = "/generated.CarShop/UpdateEngine"
	CarShop_GetEngine_FullMethodName         = "/generated.CarShop/GetEngine"
	CarShop_AddCarModel_FullMethodName       = "/generated.CarShop/AddCarModel"
	CarShop_DeleteCarModel_FullMethodName    = "/generated.CarShop/DeleteCarModel"
	CarShop_UpdateCarModel_FullMethodName    = "/generated.CarShop/UpdateCarModel"
	CarShop_GetCarModel_FullMethodName       = "/generated.CarShop/GetCarModel"
	CarShop_AddCarToUser_FullMethodName      = "/generated.CarShop/AddCarToUser"
	CarShop_RemoveCarFromUser_FullMethodName = "/generated.CarShop/RemoveCarFromUser"
	CarShop_GetUserCars_FullMethodName       = "/generated.CarShop/GetUserCars"
)

// CarShopClient is the client API for CarShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Описание сервиса
type CarShopClient interface {
	// Операции с пользователями
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Response, error)
	GetUser(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*User, error)
	// Операции с двигателями
	AddEngine(ctx context.Context, in *AddEngineRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteEngine(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateEngine(ctx context.Context, in *UpdateEngineRequest, opts ...grpc.CallOption) (*Response, error)
	GetEngine(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Engine, error)
	// Операции с автомобилями
	AddCarModel(ctx context.Context, in *AddCarModelRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteCarModel(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateCarModel(ctx context.Context, in *UpdateCarModelRequest, opts ...grpc.CallOption) (*Response, error)
	GetCarModel(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CarModel, error)
	// Операции связывания
	AddCarToUser(ctx context.Context, in *AddCarToUserRequest, opts ...grpc.CallOption) (*Response, error)
	RemoveCarFromUser(ctx context.Context, in *RemoveCarFromUserRequest, opts ...grpc.CallOption) (*Response, error)
	GetUserCars(ctx context.Context, in *GetUserCarsRequest, opts ...grpc.CallOption) (*CarModels, error)
}

type carShopClient struct {
	cc grpc.ClientConnInterface
}

func NewCarShopClient(cc grpc.ClientConnInterface) CarShopClient {
	return &carShopClient{cc}
}

func (c *carShopClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) DeleteUser(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) GetUser(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, CarShop_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) AddEngine(ctx context.Context, in *AddEngineRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_AddEngine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) DeleteEngine(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_DeleteEngine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) UpdateEngine(ctx context.Context, in *UpdateEngineRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_UpdateEngine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) GetEngine(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Engine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Engine)
	err := c.cc.Invoke(ctx, CarShop_GetEngine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) AddCarModel(ctx context.Context, in *AddCarModelRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_AddCarModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) DeleteCarModel(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_DeleteCarModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) UpdateCarModel(ctx context.Context, in *UpdateCarModelRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_UpdateCarModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) GetCarModel(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CarModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarModel)
	err := c.cc.Invoke(ctx, CarShop_GetCarModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) AddCarToUser(ctx context.Context, in *AddCarToUserRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_AddCarToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) RemoveCarFromUser(ctx context.Context, in *RemoveCarFromUserRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CarShop_RemoveCarFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carShopClient) GetUserCars(ctx context.Context, in *GetUserCarsRequest, opts ...grpc.CallOption) (*CarModels, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarModels)
	err := c.cc.Invoke(ctx, CarShop_GetUserCars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarShopServer is the server API for CarShop service.
// All implementations must embed UnimplementedCarShopServer
// for forward compatibility.
//
// Описание сервиса
type CarShopServer interface {
	// Операции с пользователями
	AddUser(context.Context, *AddUserRequest) (*Response, error)
	DeleteUser(context.Context, *IDRequest) (*Response, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*Response, error)
	GetUser(context.Context, *IDRequest) (*User, error)
	// Операции с двигателями
	AddEngine(context.Context, *AddEngineRequest) (*Response, error)
	DeleteEngine(context.Context, *IDRequest) (*Response, error)
	UpdateEngine(context.Context, *UpdateEngineRequest) (*Response, error)
	GetEngine(context.Context, *IDRequest) (*Engine, error)
	// Операции с автомобилями
	AddCarModel(context.Context, *AddCarModelRequest) (*Response, error)
	DeleteCarModel(context.Context, *IDRequest) (*Response, error)
	UpdateCarModel(context.Context, *UpdateCarModelRequest) (*Response, error)
	GetCarModel(context.Context, *IDRequest) (*CarModel, error)
	// Операции связывания
	AddCarToUser(context.Context, *AddCarToUserRequest) (*Response, error)
	RemoveCarFromUser(context.Context, *RemoveCarFromUserRequest) (*Response, error)
	GetUserCars(context.Context, *GetUserCarsRequest) (*CarModels, error)
	mustEmbedUnimplementedCarShopServer()
}

// UnimplementedCarShopServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCarShopServer struct{}

func (UnimplementedCarShopServer) AddUser(context.Context, *AddUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedCarShopServer) DeleteUser(context.Context, *IDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCarShopServer) UpdateUser(context.Context, *UpdateUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedCarShopServer) GetUser(context.Context, *IDRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCarShopServer) AddEngine(context.Context, *AddEngineRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEngine not implemented")
}
func (UnimplementedCarShopServer) DeleteEngine(context.Context, *IDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEngine not implemented")
}
func (UnimplementedCarShopServer) UpdateEngine(context.Context, *UpdateEngineRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEngine not implemented")
}
func (UnimplementedCarShopServer) GetEngine(context.Context, *IDRequest) (*Engine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngine not implemented")
}
func (UnimplementedCarShopServer) AddCarModel(context.Context, *AddCarModelRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCarModel not implemented")
}
func (UnimplementedCarShopServer) DeleteCarModel(context.Context, *IDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarModel not implemented")
}
func (UnimplementedCarShopServer) UpdateCarModel(context.Context, *UpdateCarModelRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarModel not implemented")
}
func (UnimplementedCarShopServer) GetCarModel(context.Context, *IDRequest) (*CarModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarModel not implemented")
}
func (UnimplementedCarShopServer) AddCarToUser(context.Context, *AddCarToUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCarToUser not implemented")
}
func (UnimplementedCarShopServer) RemoveCarFromUser(context.Context, *RemoveCarFromUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCarFromUser not implemented")
}
func (UnimplementedCarShopServer) GetUserCars(context.Context, *GetUserCarsRequest) (*CarModels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCars not implemented")
}
func (UnimplementedCarShopServer) mustEmbedUnimplementedCarShopServer() {}
func (UnimplementedCarShopServer) testEmbeddedByValue()                 {}

// UnsafeCarShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarShopServer will
// result in compilation errors.
type UnsafeCarShopServer interface {
	mustEmbedUnimplementedCarShopServer()
}

func RegisterCarShopServer(s grpc.ServiceRegistrar, srv CarShopServer) {
	// If the following call pancis, it indicates UnimplementedCarShopServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CarShop_ServiceDesc, srv)
}

func _CarShop_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).DeleteUser(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).GetUser(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_AddEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).AddEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_AddEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).AddEngine(ctx, req.(*AddEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_DeleteEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).DeleteEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_DeleteEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).DeleteEngine(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_UpdateEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).UpdateEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_UpdateEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).UpdateEngine(ctx, req.(*UpdateEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_GetEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).GetEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_GetEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).GetEngine(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_AddCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCarModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).AddCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_AddCarModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).AddCarModel(ctx, req.(*AddCarModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_DeleteCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).DeleteCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_DeleteCarModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).DeleteCarModel(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_UpdateCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).UpdateCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_UpdateCarModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).UpdateCarModel(ctx, req.(*UpdateCarModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_GetCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).GetCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_GetCarModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).GetCarModel(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_AddCarToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCarToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).AddCarToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_AddCarToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).AddCarToUser(ctx, req.(*AddCarToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_RemoveCarFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCarFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).RemoveCarFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_RemoveCarFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).RemoveCarFromUser(ctx, req.(*RemoveCarFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarShop_GetUserCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).GetUserCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarShop_GetUserCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).GetUserCars(ctx, req.(*GetUserCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarShop_ServiceDesc is the grpc.ServiceDesc for CarShop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarShop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.CarShop",
	HandlerType: (*CarShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _CarShop_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CarShop_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _CarShop_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CarShop_GetUser_Handler,
		},
		{
			MethodName: "AddEngine",
			Handler:    _CarShop_AddEngine_Handler,
		},
		{
			MethodName: "DeleteEngine",
			Handler:    _CarShop_DeleteEngine_Handler,
		},
		{
			MethodName: "UpdateEngine",
			Handler:    _CarShop_UpdateEngine_Handler,
		},
		{
			MethodName: "GetEngine",
			Handler:    _CarShop_GetEngine_Handler,
		},
		{
			MethodName: "AddCarModel",
			Handler:    _CarShop_AddCarModel_Handler,
		},
		{
			MethodName: "DeleteCarModel",
			Handler:    _CarShop_DeleteCarModel_Handler,
		},
		{
			MethodName: "UpdateCarModel",
			Handler:    _CarShop_UpdateCarModel_Handler,
		},
		{
			MethodName: "GetCarModel",
			Handler:    _CarShop_GetCarModel_Handler,
		},
		{
			MethodName: "AddCarToUser",
			Handler:    _CarShop_AddCarToUser_Handler,
		},
		{
			MethodName: "RemoveCarFromUser",
			Handler:    _CarShop_RemoveCarFromUser_Handler,
		},
		{
			MethodName: "GetUserCars",
			Handler:    _CarShop_GetUserCars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
